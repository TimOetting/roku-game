// Generated by CoffeeScript 1.10.0
(function() {
  var Position, PossibleTurns;

  Position = require('./position');

  module.exports = PossibleTurns = (function() {
    function PossibleTurns(board1, position1) {
      var i, j, len, n, ref, x, y;
      this.board = board1;
      this.position = position1;
      x = this.position.x;
      y = this.position.y;
      this.neighbours = [new Position(x, y - 1), new Position(x + 1, y - (x % 2 === 0 ? 0 : 1)), new Position(x + 1, y + (x % 2 === 0 ? 1 : 0)), new Position(x, y + 1), new Position(x - 1, y + (x % 2 === 0 ? 1 : 0)), new Position(x - 1, y - (x % 2 === 0 ? 0 : 1))];
      ref = this.neighbours;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        n = ref[i];
        if (!this.isFieldInsideBounds(n)) {
          this.neighbours[i] = null;
        }
      }
    }

    PossibleTurns.prototype.isFieldInsideBounds = function() {
      var ref, ref1;
      return (0 <= (ref = this.position.x) && ref <= 6) && (0 <= (ref1 = this.position.y) && ref1 <= 5);
    };

    PossibleTurns.prototype.isFieldEmpty = function(position) {
      if (this.isFieldInsideBounds(position)) {
        return this.board.tiles[this.position.x][this.position.y] == null;
      } else {
        return false;
      }
    };

    PossibleTurns.prototype.getSwordAttacks = function() {
      var i, j, len, neighbourToken, possibilities, swords, token;
      possibilities = [];
      token = board.tiles[position.x][position.y];
      swords = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 5; i = ++j) {
          if (token.sides[i] === Weapon.sword) {
            results.push(i);
          }
        }
        return results;
      })();
      for (j = 0, len = swords.length; j < len; j++) {
        i = swords[j];
        if (!(this.neighbours[i](!null))) {
          continue;
        }
        neighbourToken = this.board.tiles[this.neighbours[i].x][this.neighbours[i].y];
        if (neighbourToken(!null)) {
          if (token.playerId !== neighbourToken.playerId && neighbourToken.sides[(i + 3) % 6] !== Weapon.shield) {
            possibilities.push(this.neighbours[i]);
          }
        }
      }
      return possibilities;
    };

    PossibleTurns.prototype.getMoves = function() {
      var possibilities;
      return possibilities = [];
    };

    return PossibleTurns;

  })();

}).call(this);
